---
# This workflow automates the creation of GitHub and PyPI releases.
# It builds Python packages for multiple OS and architecture combinations,
#  generates release notes by using commitizen Espressif plugin,
#  uploads artifacts to GitHub Releases, and publishes the release to PyPI.

name: ðŸ“¦ Create Release GitHub and PyPI

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.3.0)'
        required: true
        default: '1.3.0'
  push: {tags: ['*v[0-9]*'], branches: ['master']}

# TODO: call pytest workflow to run tests before creating a release

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-release-assets:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      fail-fast: true # Stop if any of the matrix builds fail
      matrix:
        os: [ubuntu-latest, windows-latest, macos-14, macos-12]
        arch: [amd64, arm64]
        python-version: ['3.9', '3.10', '3.11', '3.12']
        exclude:
          - {os: windows-latest, arch: arm64}   # Windows doesn't support arm64 in this context
          - {os: macos-12, arch: arm64}   # macos-12 runner is Intel Silicon
          - {os: macos-14, arch: amd64}   # macos-14 runner is Apple M1 Silicon

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip

      - name: Install dependencies
        run: |-
          python -m pip install --upgrade pip
          pip install build

      - name: Build python wheels + package source code
        run: |
          python -m build
          ls -la dist/

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: czespressif-build-${{ matrix.os }}-${{ matrix.arch }}-py${{ matrix.python-version }}
          path: dist

  # merge-builds:
  #   runs-on: ubuntu-latest
  #   needs: build-release-assets
  #   steps:
  #     - name: Merge Artifacts
  #       uses: actions/upload-artifact/merge@v4
  #       with:
  #         name: czespressif-builds-merged
  #         pattern: czespressif-build-*

  create-release:
    needs: build-release-assets
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      # - name: Download all artifacts
      #   uses: actions/download-artifact@v4
      #   with:
      #     path: ./artifacts

      - name: Download All Artifacts and Merge
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          pattern: czespressif-build-*
          merge-multiple: true

      - name: Show merged
        run: |
          echo "Listing dir artifacts:"
          ls -la ./artifacts

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch the entire history

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9' # Minimum supported version - only for running `cz changelog ...`
          cache: pip

      - name: Install dependencies
        run: |-
          python -m pip install --upgrade pip
          python -m pip install .

      - name: Get release version from "czespressif/__init__.py"
        run: |-
          version=$(grep '__version__' czespressif/__init__.py | sed -E "s/__version__ = '([^ ]*)'.*/\1/")
          echo "VERSION=$version" >> $GITHUB_ENV

      - name: Show version
        run: |
          echo "Version: ${{ env.VERSION }}"

      - name: Generate Release notes from Changelog
        run: |
          cz changelog v${{ env.VERSION }} --file-name RELEASE_NOTES.md
          cat RELEASE_NOTES.md

      # - name: Check if RELEASE_NOTES.md exists # DEVTEST: this is for testing purposes
      #   run: ls -l RELEASE_NOTES.md

      # - name: Show Release notes
      #   run: cat RELEASE_NOTES.md

      # - name: Create GitHub release (and upload assets)
      #   id: create_release
      #   uses: softprops/action-gh-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     body_path: RELEASE_NOTES.md
      #     name: Version v${{ env.VERSION }}
      #     draft: false
      #     prerelease: false
      #     files: |
      #       dist/*.whl
      #       dist/*.tar.gz

      # - name: Create PyPI release and (upload assets to PyPI)
      #   uses: pypa/gh-action-pypi-publish@release/v1
      #   with:
      #     password: ${{ secrets.TEST_PYPI_PROJECT_TOKEN }}
      #     skip-existing: true
      #     verify-metadata: true
